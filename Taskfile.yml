version: '3'

vars:
  APP_NAME: "chronono"

tasks:

  pre-build:
    summary: Pre-build hooks

  post-build:
    summary: Post-build hooks

  install-frontend-deps:
    summary: Install frontend dependencies
    dir: frontend
    sources:
      - package.json
      - package-lock.json
    generates:
      - node_modules/*
    preconditions:
      - sh: npm version
        msg: "Looks like npm isn't installed. Npm is part of the Node installer: https://nodejs.org/en/download/"
    cmds:
      - npm install

  build-frontend:
    summary: Build the frontend project
    dir: frontend
    deps:
      - install-frontend-deps
    cmds:
      - npm run build

  build:darwin:
    summary: Builds the application
    platforms:
      - darwin
    cmds:
     - task: pre-build
     - task: build-frontend
     - go build -gcflags=all="-N -l" -o bin/chronono
     - task: post-build
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"

  build:windows:
    summary: Builds the application for Windows
    platforms:
      - windows
    cmds:
      - task: pre-build
      - task: build-frontend     
      - go build -gcflags=all="-N -l" -o bin/chronono.exe
      - task: post-build

  build:
    summary: Builds the application
    cmds:
      - task: build:darwin
      - task: build:windows

  generate-icons:
    summary: Generates Windows `.ico` and Mac `.icns` files from an image
    dir: build
    cmds:
      # Generates both .ico and .icns files
      - wails3 generate icons -input appicon.png

  build-app-prod-darwin:
    summary: Creates a production build of the application
    cmds:
      - task: pre-build
      - task: build-frontend
      - GOOS=darwin GOARCH={{.ARCH}} go build -tags production -ldflags="-w -s" -o build/bin/{{.APP_NAME}}
      - task: post-build
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"
    vars:
      ARCH: $GOARCH

  package-universal-darwin:
    summary: Packages a production build of the application into a `.app` bundle
    platform: darwin
    cmds:
      - task: pre-build
      - task: build-frontend
      - GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -tags production -ldflags="-w -s" -o bin/{{.APP_NAME}}_amd64
      - GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 go build -tags production -ldflags="-w -s" -o bin/{{.APP_NAME}}_arm64
      - task: post-build
      - task: generate-icons
      - lipo -create -output bin/{{.APP_NAME}} bin/{{.APP_NAME}}_amd64 bin/{{.APP_NAME}}_arm64
      - rm -f bin/{{.APP_NAME}}_amd64 bin/{{.APP_NAME}}_arm64
      - task: create-app-bundle
    env:
      CGO_CFLAGS: "-mmacosx-version-min=10.13"
      CGO_LDFLAGS: "-mmacosx-version-min=10.13"
      MACOSX_DEPLOYMENT_TARGET: "10.13"

  create-app-bundle:
    summary: Builds a `.app` bundle
    platform: darwin
    cmds:
      - mkdir -p {{.APP_NAME}}.app/Contents/{MacOS,Resources}
      - cp build/icons.icns {{.APP_NAME}}.app/Contents/Resources
      - cp bin/{{.APP_NAME}} {{.APP_NAME}}.app/Contents/MacOS
      - cp build/Info.plist {{.APP_NAME}}.app/Contents

  package-darwin-arm64:
    summary: Packages a production build of the application into a `.app` bundle
    platform: darwin
    deps:
      - task: build-app-prod-darwin
        vars:
            ARCH: arm64
      - generate-icons
    cmds:
      - task: create-app-bundle

  generate:syso:
    dir: build
    platform: windows
    cmds:
      - wails3 generate syso -arch {{.ARCH}} -icon icon.ico -manifest wails.exe.manifest -info info.json -out ../wails.syso
    vars:
      ARCH: $GOARCH

  package:windows:
    summary: Packages a production build of the application into a `.exe` bundle
    platform: windows
    deps:
      - generate-icons
    cmds:
      - task: generate:syso
        vars:
            ARCH: amd64
      - go build -tags production -ldflags="-w -s -H windowsgui" -o bin/{{.APP_NAME}}.exe
      - powershell Remove-item wails.syso
